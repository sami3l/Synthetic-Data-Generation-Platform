"""Add hyperparameters column to request_parameters

Revision ID: d96e2e4ec6a7
Revises: 9150e5b75995
Create Date: 2025-08-01 17:07:37.312044

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd96e2e4ec6a7'
down_revision: Union[str, Sequence[str], None] = '9150e5b75995'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_profiles_id'), table_name='user_profiles')
    op.drop_table('user_profiles')
    op.alter_column('notifications', 'timestamp',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.add_column('request_parameters', sa.Column('hyperparameters', sa.JSON(), nullable=True))
    op.drop_constraint(op.f('synthetic_datasets_request_id_fkey'), 'synthetic_datasets', type_='foreignkey')
    op.create_foreign_key(None, 'synthetic_datasets', 'data_requests', ['request_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'synthetic_datasets', type_='foreignkey')
    op.create_foreign_key(op.f('synthetic_datasets_request_id_fkey'), 'synthetic_datasets', 'data_requests', ['request_id'], ['id'], ondelete='CASCADE')
    op.drop_column('request_parameters', 'hyperparameters')
    op.alter_column('notifications', 'timestamp',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=True)
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('organization', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('usage_purpose', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_profiles_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_profiles_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_profiles_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_profiles_id'), 'user_profiles', ['id'], unique=False)
    # ### end Alembic commands ###
